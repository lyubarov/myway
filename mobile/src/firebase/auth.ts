import auth from "@react-native-firebase/auth"
import { addUserToFirestore, findUserByPhone, getUserFromFirestore } from "./db";
import { GoogleSignin } from "@react-native-google-signin/google-signin";
import { doc, setDoc} from "firebase/firestore"; 
import { db,functions } from "@utils/firebase";
// import * as AppleAuthentication from 'expo-apple-authentication';
// import AppleAuthentication from 'react-native-apple-authentication';
import { appleAuth } from '@invertase/react-native-apple-authentication';
import { Alert } from "react-native";
import { httpsCallable } from "firebase/functions";


// react-native-apple-authentication


export const signUp = async (data: {
  email: string;
  password: string;
  displayName: string;
  number: string;
  dateOfBirthday: { day: string; month: string; year: string };
}): Promise<any> => {
  try {
    const response = await auth().createUserWithEmailAndPassword(data.email, data.password);
    const user = response.user;

    await user.updateProfile({ displayName: data.displayName });
    await user.reload();

    console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π:", user);

    const userData = {
      uid: user.uid,
      displayName: data.displayName,
      email: data.email,
      number: data.number,
      dateOfBirthday: data.dateOfBirthday,
    };

    await addUserToFirestore(userData);
    console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ –≤ Firestore");

    return user; 
  } catch (error: any) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", error.message);
    throw error;
  }
};
export const confirmAndLinkPhone = async (confirmation: any, code: string, registrationData: any) => {
  try {
    const phoneCredential = auth.PhoneAuthProvider.credential(
      confirmation.verificationId,
      code
    );

    console.log("üîÑ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...");
    const user = await signUp(registrationData);

    console.log("üîÑ –ü—Ä–∏–≤‚Äô—è–∑–∫–∞ –Ω–æ–º–µ—Ä–∞ –¥–æ –∞–∫–∞—É–Ω—Ç–∞...");
    await user.linkWithCredential(phoneCredential);
    await user.reload();

    console.log("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–æ –¥–æ –∞–∫–∞—É–Ω—Ç–∞:");

    return user;
  } catch (error: any) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è OTP:", error.message);
    throw error;
  }
};


const checkIfPhoneExists = async (phoneNumber: string) => {
  try {
    
     const result = await httpsCallable(functions, 'checkPhoneNumberExists');
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó
    const response = await result({
      phoneNumber
    });
    
    if (response.data.exists) {
      console.log("‚úîÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î");
      return response.data.exists;
    } else {
      console.log("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
      return response.data.exists;
    }
  } catch (error) {
    console.error("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É:", error.message);
  }
};

export const signIn = async (emailOrPhone: string, password?: string) => {
  console.log("üì© –û—Ç—Ä–∏–º–∞–Ω–æ email –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω:", emailOrPhone);
  
  try {
    let user;

    if (emailOrPhone.includes("@")) {
      if (!password) {
        throw new Error("‚ùå –ü–∞—Ä–æ–ª—å –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ email.");
      }

      console.log("üîÑ –í—Ö—ñ–¥ —á–µ—Ä–µ–∑ Email...");
      const response = await auth().signInWithEmailAndPassword(emailOrPhone, password);
      user = response.user;
      console.log("‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π:", user);
    return user;
    } else {
      
      const isAcc = await checkIfPhoneExists(emailOrPhone)
      if (isAcc) {
        console.log("üîÑ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ OTP...");
         Alert.alert(`üì© –ö–æ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${emailOrPhone}!`);

        const confirmation = await auth().signInWithPhoneNumber(emailOrPhone);
        return confirmation;
      } else {
        Alert.alert("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.")
        return;
      }
    }
  } catch (error: any) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:", error.message);
    throw error;
  }
};
export const resetPassword = async (email: string): Promise<void> => {
  try {
    console.log("üì© –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é –¥–ª—è:", email);
    
    await auth().sendPasswordResetEmail(email);
    
    console.log("‚úÖ –õ–∏—Å—Ç —ñ–∑ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º –ø–∞—Ä–æ–ª—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!");
  } catch (error: any) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–∞—Ä–æ–ª—é:", error.message);
    throw error;
  }
};
export const confirmOTP = async (confirmation: any, code: string,number:string) => {
  try {
 const userExist = await findUserByPhone(number);
    if (!userExist) {
      console.log("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É Firestore. –í—Ö—ñ–¥ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.");
      return null;
    }
    const userCredential = await confirmation.confirm(code);

    console.log("‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:", userCredential.user);

    return userCredential.user; 
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è OTP:", error);
    throw error;
  }
};



export const signOut = async (): Promise<void> => {
  try {
    await GoogleSignin.signOut()
    await auth().signOut(); 
  } catch (error: any) {
    console.error("Error during sign out:", error.message);
  }
};


export const signInWithGoogle = async () => {
  try {
    
     console.log("üöÄ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Play Services...");
    await GoogleSignin.hasPlayServices({showPlayServicesUpdateDialog: true});

    console.log("üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Google...");
    
    const data = await GoogleSignin.signIn({ forceConsentPrompt: true });
    console.log("‚úÖ Google Sign-In –¥–∞–Ω—ñ:", data);

    const idToken = data.data?.idToken
    

    const googleCredential = auth.GoogleAuthProvider.credential(idToken);
    const response = await auth().signInWithCredential(googleCredential);
    const user = response.user._user;

    const userInBD = await getUserFromFirestore(user.uid)
    if (!userInBD) {
      const userData = {
        uid: user.uid,
        displayName: user.displayName,
        email: user.email,
        number: user.phoneNumber || null,
        photoUrl: user.photoURL,
      };

      await addUserToFirestore(userData);
    }
    return user;
  } catch (error: any) {
    console.log("error ====>>", error);
    
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ Google:", error.message);
  }
};

export const signInWithGoogleYouTube = async () => {
  try {
    console.log("üöÄ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Play Services...");
    await GoogleSignin.hasPlayServices({ showPlayServicesUpdateDialog: true });

    console.log("üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Google...");
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
    const data = await GoogleSignin.signIn();
    console.log("‚úÖ Google Sign-In –¥–∞–Ω—ñ:", data);

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è access token
    const { accessToken } = await GoogleSignin.getTokens();
    console.log("Google Access Token:", accessToken);

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ª–∏—à–µ access token
    return accessToken;
  } catch (error: any) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ Google:", error.message);
    throw error;
  }
};




// export const signInWithApple = async () => {

//   try {
//         console.log("first===>>>");

//    const appleAuthRequestResponse = await AppleAuthentication.signInAsync({
//       requestedScopes: [AppleAuthentication.AppleAuthenticationScope.EMAIL, AppleAuthentication.AppleAuthenticationScope.FULL_NAME],
//     });

//         console.log("appleAuthRequestResponse===>>>");

//     if (!appleAuthRequestResponse.identityToken) {
//       throw new Error("Apple Sign-In failed - No identity token returned.");
//     }
//     console.log("appleAuthRequestResponse===>>>",appleAuthRequestResponse);

//     const { identityToken, nonce } = appleAuthRequestResponse;
//     const appleCredential = auth.AppleAuthProvider.credential(identityToken, nonce);

//     const response = await auth().signInWithCredential(appleCredential);
//     const user = response.user;
//     console.log("userApple",user);
    

//     console.log("–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ —á–µ—Ä–µ–∑ Apple:", user);

//     const userInDB = await getUserFromFirestore(user.uid);
//     if (!userInDB) {
//       const userData = {
//         uid: user.uid,
//         displayName: user.displayName || appleAuthRequestResponse.fullName?.givenName,
//         email: user.email || "",
//         number: user.phoneNumber || null,
//         photoUrl: user.photoURL || "", 
//       };

//       await addUserToFirestore(userData);
//       console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ –≤ Firestore");
//     } else {
//       console.log("‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î —É Firestore, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ.");
//     }

//     return user;
//   } catch (error: any) {
//     console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ Apple:", error.message);
//   }
// };


export const signInWithApple = async () => {
  try {
    // const appleAuthRequestResponse = await AppleAuthentication.signInAsync({
    //   requestedScopes: [
    //     AppleAuthentication.AppleAuthenticationScope.EMAIL,
    //     AppleAuthentication.AppleAuthenticationScope.FULL_NAME,
    //   ],
    // });
    const appleAuthRequestResponse = await appleAuth.performRequest({
  requestedOperation: appleAuth.Operation.LOGIN,
  requestedScopes: [appleAuth.Scope.FULL_NAME, appleAuth.Scope.EMAIL],
    });
      const credentialState = await appleAuth.getCredentialStateForUser(appleAuthRequestResponse.user);
console.log(credentialState);


    if (!appleAuthRequestResponse.identityToken) {
      throw new Error("Apple Sign-In failed - No identity token returned.");
    }

    const { identityToken, nonce, email, fullName } = appleAuthRequestResponse;

    if (!email || !fullName) {
      console.warn("Email –∞–±–æ Full Name –Ω–µ –±—É–ª–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ –∑ Apple Sign-In.");
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ Apple AuthCredential
    const appleCredential = auth.AppleAuthProvider.credential(identityToken, nonce);

    // –í—Ö–æ–¥–∏–º–æ —á–µ—Ä–µ–∑ Firebase –∑ AppleCredential
    const response = await auth().signInWithCredential(appleCredential);
    const user = response.user;

    console.log("userApple", user);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É Firestore
    const userInDB = await getUserFromFirestore(user.uid);
    if (!userInDB) {
      const userData = {
        uid: user.uid,
        displayName: user.displayName || fullName?.givenName,
        email: email || "",
        number: user.phoneNumber || null,
        photoUrl: user.photoURL || "", 
      };

      // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ Firestore
      await addUserToFirestore(userData);
      console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ –≤ Firestore");
    } else {
      console.log("‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î —É Firestore, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ.");
    }

    return user;
  } catch (error: any) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ Apple:", error.message);
  }
};




export const signInWithPhoneNumber = async (phoneNumber: string) => {
  try {
    const confirmation = await auth().signInWithPhoneNumber(phoneNumber);
    console.log("üì≤ –ö–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ:", confirmation);
    return confirmation; 
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–¥—É:", error);
    throw error;
  }
};



export const confirmPhoneLink = async (confirmation: any, code: string): Promise<any> => {
  try {
    const phoneCredential = auth.PhoneAuthProvider.credential(
      confirmation.verificationId,
      code
    );

    const user = auth().currentUser;

    if (!user) {
      throw new Error("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!");
    }

    await user.linkWithCredential(phoneCredential);
    await user.reload();
    const updatedUser = auth().currentUser;

    if (!updatedUser || !updatedUser.phoneNumber) {
      throw new Error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.");
    }

    const userRef = doc(db, "users", updatedUser.uid);
    await setDoc(userRef, { phoneNumber: updatedUser.phoneNumber }, { merge: true });

    console.log("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–æ!", updatedUser);
    return updatedUser;
  } catch (error: any) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è OTP:", error.message);
    throw error;
  }
};



