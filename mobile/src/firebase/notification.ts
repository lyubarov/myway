import messaging from "@react-native-firebase/messaging";
import { updateDoc, doc, query, collection, orderBy, getDocs, where, Timestamp, addDoc, limit } from "firebase/firestore";
import { db, functions } from "@utils/firebase";
import { Alert } from 'react-native';
import { PermissionsAndroid, Platform } from 'react-native';
import { httpsCallable } from "firebase/functions";

export const requestUserPermission = async (uid: string) => {
  const authStatus = await messaging().requestPermission();
  const enabled =
    authStatus === messaging.AuthorizationStatus.AUTHORIZED ||
    authStatus === messaging.AuthorizationStatus.PROVISIONAL;

  if (enabled) {
    console.log("‚úÖ –î–æ–∑–≤—ñ–ª –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ");
    if (Platform.OS === 'android') {
      await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.POST_NOTIFICATIONS);
    }
    if (Platform.OS === 'ios') {
      await messaging().registerDeviceForRemoteMessages();
    }
    await getFCMToken(uid);
  }
};


const getFCMToken = async (uid: string) => {
      if (!uid) return; 

  try {
    await messaging().registerDeviceForRemoteMessages();

    const token = await messaging().getToken();
    console.log("üî• –û—Ç—Ä–∏–º–∞–Ω–æ FCM-—Ç–æ–∫–µ–Ω:", token);

      if (token) {
        console.log("uid",uid);
        
      await updateDoc(doc(db, "users", uid), { fcmToken: token });
    }
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è FCM-—Ç–æ–∫–µ–Ω—É", error);
  }
};
export const getToken = async () => {

  try {
    await messaging().registerDeviceForRemoteMessages();

    const token = await messaging().getToken();
    console.log("üî• –û—Ç—Ä–∏–º–∞–Ω–æ FCM-—Ç–æ–∫–µ–Ω:", token);

    return token;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è FCM-—Ç–æ–∫–µ–Ω—É", error);
  }
};


export const listenToForegroundNotifications = () => {
  return messaging().onMessage(async remoteMessage => {
    Alert.alert(remoteMessage.notification?.title, remoteMessage.notification?.body);
  });
};


export const listenToBackgroundNotifications = () => {
  messaging().setBackgroundMessageHandler(async remoteMessage => {
    console.log('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ —É —Ñ–æ–Ω—ñ!', remoteMessage);
  });

  messaging().onNotificationOpenedApp(remoteMessage => {
    console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ–Ω—ñ', remoteMessage);
  });

  messaging()
    .getInitialNotification()
    .then(remoteMessage => {
      if (remoteMessage) {
        console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫—Ä–∏–≤ –¥–æ–¥–∞—Ç–æ–∫ —á–µ—Ä–µ–∑ –ø—É—à-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', remoteMessage);
      }
    });
};

const sendNotification = httpsCallable(functions,'sendNotification');

export const sendNotificationToUsers = async (userId: string | null, title: string, body: string, screen: string) => {
  try {
    const response = await sendNotification({
      userId,   
      title,    
      body,    
      screen,    
    });

    if (response.data.success) {
      console.log(`‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: ${response.data.sentCount} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º`);
    } else {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', response.data.message);
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó:', error);
  }
};



export const getNotifications = async () => {
  try {
    // ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ –ø–µ—Ä—à–∏–º–∏)
const q = query(
      collection(db, "scheduled_notifications"),
      where("status", "==", "sent"), // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º "send"
      orderBy("createdAt", "desc")  // –°–æ—Ä—Ç—É—î–º–æ –ø–æ –ø–æ–ª—é "createdAt" —É –ø–æ—Ä—è–¥–∫—É —Å–ø–∞–¥–∞–Ω–Ω—è
    );    const querySnapshot = await getDocs(q);

    // ‚úÖ –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ —É –º–∞—Å–∏–≤
    const notifications = querySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));

    console.log("üì© –û—Ç—Ä–∏–º–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", notifications);
    return notifications;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:", error);
    return [];
  }
};


export type NotificationType = "system" | "push" | "popup";
export interface NotificationData {
  userId: string;
  id?: string; 
  title: string;
  description: string;
  category: string;
  date: string; 
  time: string; 
  type: NotificationType; 
  screen?: string;
  createdAt?: Timestamp;
  calendar?: boolean;
}

export const addNotification = async (notification: NotificationData): Promise<void> => {
  const {userId, title, description, category, date, time, type, screen, calendar } = notification;

  if (!title || !description || !category || !date || !time || !type) {
    alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è!");
    return;
  }

  try {
 
    // üîπ –°—Ç–≤–æ—Ä—é—î–º–æ `Date` –æ–±'—î–∫—Ç
    const scheduledDateTime = new Date(`${date}T${time}:00`);

    if (isNaN(scheduledDateTime.getTime())) {
      throw new Error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –∞–±–æ —á–∞—Å—É");
    }

    const scheduledTimestamp = Timestamp.fromDate(scheduledDateTime);

    const notificationRef = await addDoc(collection(db, "scheduled_notifications"), {
      userId,
      title,
      body: description,
      screen,
      scheduledTime: scheduledTimestamp, 
      status: "pending",
      calendar: calendar ? calendar : false,
      type: type,
      createdAt: Timestamp.now(),
    });
    await updateDoc(doc(db, "scheduled_notifications", notificationRef.id), {
      id: notificationRef.id,
    });

    console.log("‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ!", notificationRef.id);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", error);
  }
};
export const getPopUpNotifications = async () => {
  try {
const q = query(
  collection(db, "scheduled_notifications"),
  where("type", "==", "popup"),
  where("scheduledTime", "<=", Timestamp.now()), 
  orderBy("createdAt", "desc"),
  limit(1) 
);
    const querySnapshot = await getDocs(q);

    const notifications = querySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));

    console.log("üì© –û—Ç—Ä–∏–º–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", notifications);
    return notifications;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:", error);
    return [];
  }
};