import * as functions from "firebase-functions";
import * as admin from "firebase-admin";
import { onSchedule } from "firebase-functions/scheduler";
import { getOrderStatus } from "./utils/novaPay";

admin.initializeApp();

interface NotificationData {
  userId?: string;
  title: string;
  body: string;
  screen?: string;
}

export const sendNotification = functions.https.onCall(async (request: functions.https.CallableRequest<NotificationData>) => {

  const { userId, title, body, screen } = request.data;

  if (!title || !body) {
    throw new functions.https.HttpsError("invalid-argument", "–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏");
  }

  try {
    let fcmTokens: string[] = [];

    if (userId) {
      // ‚úÖ –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ userId, —à—É–∫–∞—î–º–æ –ª–∏—à–µ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const userDoc = await admin.firestore().collection("users").doc(userId).get();
      if (userDoc.exists) {
        const userData = userDoc.data();
        if (userData?.fcmToken) {
          fcmTokens.push(userData.fcmToken);
        }
      }
    } else {
      // ‚úÖ –Ø–∫—â–æ userId –Ω–µ–º–∞—î, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
      const usersSnapshot = await admin.firestore().collection("users").get();
      usersSnapshot.forEach((doc) => {
        const userData = doc.data();
        if (userData.fcmToken) {
          fcmTokens.push(userData.fcmToken);
        }
      });
    }

    if (fcmTokens.length === 0) {
      console.warn("‚ùó –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö FCM-—Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è.");
      return { success: false, message: "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö FCM-—Ç–æ–∫–µ–Ω—ñ–≤." };
    }

    // ‚úÖ –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    const messages = fcmTokens.map((token) => ({
      token,
      notification: { title, body },
      data: { screen: screen || "NotificationScreen" },
    }));

    const responses = await Promise.all(messages.map((msg) => admin.messaging().send(msg)));

    console.log(`‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ${responses.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º`);

    return {
      success: true,
      sentCount: responses.length,
    };
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", error);
    throw new functions.https.HttpsError("internal", "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è");
  }
});


export const resetWaterBalance = onSchedule(
  {
    schedule: "0 0 * * *", 
    timeZone: "Europe/Kyiv", 
  },
  async (event) => {
    try {
      // Get all users
      const usersSnapshot = await admin.firestore().collection("users").get();

      // Prepare a batch to update water balance for all users
      const batch = admin.firestore().batch();

      // Loop through each user and reset their water balance
      usersSnapshot.forEach((userDoc) => {
        batch.update(userDoc.ref, { "waterBalance.drunk": 0,"historyIntakeWater":[]});
      });

      await batch.commit(); // Commit all updates in a single batch
      console.log("‚úÖ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ–Ω–æ–≤–ª–µ–Ω—ñ, —Ä—ñ–≤–µ–Ω—å –≤–æ–¥–∏ –æ–±–Ω—É–ª–µ–Ω–æ");

    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–Ω—ñ —Ä—ñ–≤–Ω—è –≤–æ–¥–∏:", error);
    }
  }
);

export const sendScheduledNotifications = onSchedule(
  {
    schedule: "every 5 minutes",
    timeZone: "Europe/Kyiv",
  },
  async () => {
    const now = admin.firestore.Timestamp.now();
    // const fiveMinutesBefore = new Date(now.toDate().getTime() - 5 * 60 * 1000);
    // const fiveMinutesAfter = new Date(now.toDate().getTime() + 5 * 60 * 1000);

    try {
      const snapshot = await admin
        .firestore()
        .collection("scheduled_notifications")
        //  .where("scheduledTime", ">=", fiveMinutesBefore) 
        // .where("scheduledTime", "<=", fiveMinutesAfter) 
        .where("scheduledTime", "<=", now) 
        .where("status", "==", "pending") 
        .get();

      if (snapshot.empty) {
        console.log("‚è≥ –ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.");
        return;
      }

      const batch = admin.firestore().batch();
      const sendPromises: Promise<any>[] = [];

      const usersSnapshot = await admin.firestore().collection("users").get();
      const userTokensMap: { [key: string]: string } = {}; 

      usersSnapshot.forEach((userDoc) => {
        const userData = userDoc.data();
        if (userData.fcmToken) {
          userTokensMap[userDoc.id] = userData.fcmToken;
        }
      });

      snapshot.forEach((doc) => {
        const notification = doc.data();
        let tokens: string[] = [];

        if (notification.userId) {
          if (userTokensMap[notification.userId]) {
            tokens = [userTokensMap[notification.userId]];
          }
        } else {
          tokens = Object.values(userTokensMap);
        }

        if (tokens.length === 0) {
          console.warn(`‚ùó –ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: ${notification.title}`);
          return;
        }

        if (notification.type === "push") {
          tokens.forEach((token) => {
            const message: admin.messaging.Message = {
              token,
              notification: {
                title: notification.title,
                body: notification.body,
              },
              android: {
    notification: {
      icon: "./img/icon.png"
    }
  },
              data: { screen: notification.screen || "NotificationScreen" },
            };

            sendPromises.push(
              admin.messaging().send(message).catch((error) => {
                  console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${token}:`, error);
              })
            );
          });
        }

          batch.update(doc.ref, { status: "sent" });
      });

      // –ß–µ–∫–∞—î–º–æ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ–¥–ø—Ä–∞–≤–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
      const responses = await Promise.all(sendPromises);
      console.log(`‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ${responses.length} —Å–ø–æ–≤—ñ—â–µ–Ω—å`);

      // –ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ, –∫–æ–º—ñ—Ç–∏–º–æ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
      await batch.commit();
      console.log("‚úÖ –°—Ç–∞—Ç—É—Å–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ");

    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å:", error);
    }
  }
);


export const sendDailyReminders = onSchedule(
  {
    schedule: "0 9 * * *", 
    timeZone: "Europe/Kyiv",
  },
  async () => {
    try {
      const usersSnapshot = await admin.firestore().collection("users").get();
      const sendPromises: Promise<any>[] = [];

      usersSnapshot.forEach((userDoc) => {
        const userData = userDoc.data();
        const fcmToken = userData.fcmToken;

        if (!fcmToken) return; 

        if (!userData.takingVitamins || userData.takingVitamins.length === 0) {
          const message: admin.messaging.Message = {
            token: fcmToken,
            notification: {
              title: "üíä –†–µ–≥—É–ª—è—Ä–Ω—ñ—Å—Ç—å = —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
              body: "–í—ñ–¥–∑–Ω–∞—á–∞–π –ø—Ä–∏–π–æ–º–∏ –≤—ñ—Ç–∞–º—ñ–Ω—ñ–≤ —É —Ç—Ä–µ–∫–µ—Ä—ñ, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ ‚Äì —Ç–≤—ñ–π —Ä–µ—Å—É—Ä—Å —Ü—å–æ–≥–æ –≤–∞—Ä—Ç–∏–π!",
            },
            data: { screen: "ResourceScreen" },
          };
          sendPromises.push(admin.messaging().send(message));
        }
      });

      await Promise.all(sendPromises);
      console.log(`‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ—Ç–∞–º—ñ–Ω–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!`);

    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –≤—ñ—Ç–∞–º—ñ–Ω–∏:", error);
    }
  }
);

export const sendReminderNotifications = onSchedule(
  {
    schedule: "0 10 * * *", // –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —â–æ–¥–Ω—è –æ 10:00
    timeZone: "Europe/Kyiv",
  },
  async () => {
    try {
      const usersSnapshot = await admin.firestore().collection("users").get();
      const sendPromises: Promise<any>[] = [];

      usersSnapshot.forEach((userDoc) => {
        const userData = userDoc.data();
        const fcmToken = userData.fcmToken;

        if (!fcmToken) return; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ FCM-—Ç–æ–∫–µ–Ω–∞

        if (!userData.reminder || userData.reminder.length === 0) {
          const message: admin.messaging.Message = {
            token: fcmToken,
            notification: {
              title: "üö∞ –í–æ–¥–∞ ‚Äì —Ç–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞!",
              body: "–¢—Ä–µ–∫–µ—Ä –¥–æ–ø–æ–º–æ–∂–µ —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ –≤–æ–¥–Ω–∏–º –±–∞–ª–∞–Ω—Å–æ–º ‚Äì –∞–∫—Ç–∏–≤—É–π –π–æ–≥–æ —ñ –≤—ñ–¥—á—É–π —Ä—ñ–∑–Ω–∏—Ü—é!",
            },
            data: { screen: "ResourceScreen" },
          };
          sendPromises.push(admin.messaging().send(message));
        }
      });

      await Promise.all(sendPromises);
      console.log(`‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!`);

    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", error);
    }
  }
);

export const sendDailyReminder = onSchedule(
  {
    schedule: "every 10 minutes",
    timeZone: "Europe/Kyiv",
  },
  async () => {
    try {
      const now = admin.firestore.Timestamp.now();
      const usersSnapshot = await admin.firestore().collection("users").get();
      const sendPromises: Promise<any>[] = [];

      usersSnapshot.forEach((userDoc) => {
        const userData = userDoc.data();
        const fcmToken = userData.fcmToken;

        if (!fcmToken || !userData.reminder || userData.reminder.length === 0) return;

        // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑ –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è–º, —â–æ —Ç–∞–º –º–∞—Å–∏–≤)
        userData.reminder.forEach((reminder: any) => {
          const scheduledTime = reminder.time; // –ß–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ "HH:mm"

          // –û—Ç—Ä–∏–º—É—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –¥–∞—Ç—É —ñ –¥–æ–¥–∞—î–º–æ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
          const scheduledDateTime = new Date();

           const [time, period] = scheduledTime.split(" "); // —Ä–æ–∑–¥—ñ–ª—è—î–º–æ —á–∞—Å —ñ AM/PM
    const [hours, minutes] = time.split(":").map(Number); // —Ä–æ–∑–¥—ñ–ª—è—î–º–æ –≥–æ–¥–∏–Ω–∏ —Ç–∞ —Ö–≤–∏–ª–∏–Ω–∏

    let hours24 = hours; // –ü–µ—Ä–µ–º—ñ–Ω–Ω–∞ –¥–ª—è 24-–≥–æ–¥–∏–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É

    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ 24-–≥–æ–¥–∏–Ω–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
    if (period === "PM" && hours !== 12) {
      hours24 += 12; // –î–æ–¥–∞—î–º–æ 12 –≥–æ–¥–∏–Ω, —è–∫—â–æ PM —ñ –Ω–µ 12
    } else if (period === "AM" && hours === 12) {
      hours24 = 0; // –Ø–∫—â–æ 12 AM, —Ç–æ —Ü–µ 00:00
    }

    scheduledDateTime.setHours(hours24, minutes, 0, 0);

          // –Ø–∫—â–æ –∑–∞—Ä–∞–∑ ¬±5 —Ö–≤ –≤—ñ–¥ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —á–∞—Å—É, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
          const fiveMinutesBefore = new Date(scheduledDateTime.getTime() - 5 * 60 * 1000);
          const fiveMinutesAfter = new Date(scheduledDateTime.getTime() + 5 * 60 * 1000);

          if (now.toDate() >= fiveMinutesBefore && now.toDate() <= fiveMinutesAfter) {
            const message: admin.messaging.Message = {
              token: fcmToken,
              notification: {
                title: "‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!",
                body: "–ß–∞—Å –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—É —Å–ø—Ä–∞–≤—É!",
              },
              data: { screen: "ReminderScreen" },
            };

            sendPromises.push(admin.messaging().send(message));
          }
        });
      });

      await Promise.all(sendPromises);
      console.log(`‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ ${sendPromises.length} –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å`);

    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:", error);
    }
  }
);
export const resetWayWallet = onSchedule(
  {
    schedule: "0 0 1 */3 *",
    timeZone: "Europe/Kyiv", 
  },
  async () => {
    try {
      const usersSnapshot = await admin.firestore().collection("users").get();

      const batch = admin.firestore().batch();

      usersSnapshot.forEach((userDoc) => {
        batch.update(userDoc.ref, { wayWallet: 0,medals:0, achievementList: [] });
      });

      await batch.commit(); 
      console.log("‚úÖ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ–Ω–æ–≤–ª–µ–Ω—ñ, wayWallet —ñ achievementList –æ—á–∏—â–µ–Ω–æ");
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ wayWallet —Ç–∞ achievementList:", error);
    }
  }
);

export const trackOrdersStatuses = onSchedule(
  {
    schedule: "every 24 hours",
    timeZone: "Europe/Kyiv",
  },
  async () => {
try {
    const ordersSnapshot = await admin.firestore().collection("orders").get();

    const updatePromises: Promise<any>[] = [];

    ordersSnapshot.forEach((orderDoc) => {
      const orderData = orderDoc.data();
      const orderRef = orderDoc.ref;

      const ttn = orderData.ttn;

      if (!ttn) return;

      updatePromises.push(
        (async () => {
          const currentStatus = await getOrderStatus(ttn);

          if (!currentStatus) return;

          // –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —Ç—É—Ç, –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –º–æ–≤–∏ API
          const isDelivered =
            currentStatus.toLowerCase().includes("–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ") ||
            currentStatus.toLowerCase().includes("delivered");

          if (isDelivered && orderData.status !== "delivered") {
            await orderRef.update({ status: "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" });
            console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${ttn} —è–∫ "delivered"`);
          }
        })()
      );
    });

    await Promise.all(updatePromises);
    console.log("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω—å:", error);
  }  }
);

interface CheckPhoneNumberExistsParams {
  phoneNumber: string; 
}

interface CheckPhoneNumberExistsResult {
  exists: boolean; 
  userRecord?: admin.auth.UserRecord; 
  error?: string;
}

export const checkPhoneNumberExists = functions.https.onCall(
  async (request: functions.https.CallableRequest<CheckPhoneNumberExistsParams>, context): Promise<CheckPhoneNumberExistsResult> => {
    const { phoneNumber } = request.data;

    if (!phoneNumber) {
      throw new functions.https.HttpsError('invalid-argument', '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É');
    }

    try {
      const userRecord = await admin.auth().getUserByPhoneNumber(phoneNumber);
      return { exists: true, userRecord };
    } catch (error: any) {
      return { exists: false, error: error.message };
    }
  }
);